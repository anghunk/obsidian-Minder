/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MinderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  notesFolder: "minder",
  dateFormat: "YYYY-MM-DD HH:mm:ss",
  displayCount: 50,
  defaultSort: "createTime",
  openOnStartup: false
};
var MinderSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Minder \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u7B14\u8BB0\u5B58\u50A8\u8DEF\u5F84").setDesc("\u6307\u5B9A\u4FDD\u5B58\u7B14\u8BB0\u7684\u6587\u4EF6\u5939\u8DEF\u5F84").addText((text) => text.setPlaceholder("\u4F8B\u5982: minder").setValue(this.plugin.settings.notesFolder).onChange(async (value) => {
      this.plugin.settings.notesFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u65E5\u671F\u683C\u5F0F").setDesc("\u7B14\u8BB0\u7684\u65E5\u671F\u663E\u793A\u683C\u5F0F").addText((text) => text.setPlaceholder("YYYY-MM-DD HH:mm:ss").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u6570\u91CF").setDesc("\u6BCF\u4E2A\u89C6\u56FE\u663E\u793A\u7684\u7B14\u8BB0\u6570\u91CF\u4E0A\u9650").addText((text) => text.setPlaceholder("50").setValue(String(this.plugin.settings.displayCount)).onChange(async (value) => {
      const numValue = Number(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.displayCount = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u6392\u5E8F").setDesc("\u7B14\u8BB0\u7684\u9ED8\u8BA4\u6392\u5E8F\u65B9\u5F0F").addDropdown((dropdown) => dropdown.addOption("createTime", "\u6309\u521B\u5EFA\u65F6\u95F4\u6392\u5E8F").addOption("updateTime", "\u6309\u7F16\u8F91\u65F6\u95F4\u6392\u5E8F").setValue(this.plugin.settings.defaultSort).onChange(async (value) => {
      this.plugin.settings.defaultSort = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u8F6F\u4EF6\u542F\u52A8\u65F6\u6253\u5F00\u63D2\u4EF6").setDesc("Obsidian\u542F\u52A8\u65F6\u81EA\u52A8\u6253\u5F00Minder\u63D2\u4EF6").addToggle((toggle) => toggle.setValue(this.plugin.settings.openOnStartup).onChange(async (value) => {
      this.plugin.settings.openOnStartup = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/components/MemoView.ts
var import_obsidian7 = require("obsidian");

// src/utils/file.ts
var import_obsidian2 = require("obsidian");
async function ensureFolderExists(app, folderPath) {
  const folderExists = app.vault.getAbstractFileByPath(folderPath) instanceof import_obsidian2.TFolder;
  if (!folderExists) {
    await app.vault.createFolder(folderPath);
  }
}
function parseMemoFileName(fileName) {
  const match = fileName.match(/minder-(\d+)\.md$/);
  if (match && match.length >= 2) {
    const timestamp = parseInt(match[1], 10);
    return {
      id: timestamp.toString(),
      // 使用时间戳作为ID
      createdAt: timestamp
    };
  }
  const now = Date.now();
  return {
    id: now.toString(),
    createdAt: now
  };
}
function generateId() {
  return Date.now().toString();
}
function extractTagsFromContent(content) {
  const tagRegex = /#([^\s#]+)/g;
  const matches = content.match(tagRegex);
  if (!matches)
    return [];
  return [...new Set(matches.map((tag) => tag.substring(1)))];
}
function createMemoFileName(memo) {
  return `minder-${memo.createdAt}.md`;
}
function createMemoMarkdown(memo) {
  const tagsText = memo.tags.length > 0 ? memo.tags.map((tag) => `#${tag}`).join(" ") : "";
  const timestamp = new Date(memo.createdAt).toISOString();
  return `---
id: ${memo.id}
created: ${timestamp}
updated: ${new Date(memo.updatedAt).toISOString()}
tags: ${tagsText}
---

${memo.content}
`;
}
function parseMemoMarkdown(content, id, createdAt) {
  const frontMatterRegex = /^---\n([\s\S]*?)\n---\n/;
  const match = content.match(frontMatterRegex);
  let frontMatter = {};
  let mainContent = content;
  if (match) {
    const frontMatterText = match[1];
    const lines = frontMatterText.split("\n");
    lines.forEach((line) => {
      const [key, ...valueParts] = line.split(":").map((part) => part.trim());
      const value = valueParts.join(":").trim();
      if (key && value) {
        frontMatter[key] = value;
      }
    });
    mainContent = content.substring(match[0].length).trim();
  }
  const tags = frontMatter.tags ? frontMatter.tags.split(" ").filter(Boolean).map((t) => t.replace(/^#/, "")) : extractTagsFromContent(mainContent);
  return {
    id: frontMatter.id || id,
    content: mainContent,
    createdAt: frontMatter.created ? new Date(frontMatter.created).getTime() : createdAt,
    updatedAt: frontMatter.updated ? new Date(frontMatter.updated).getTime() : Date.now(),
    tags
  };
}

// src/services/memoService.ts
var MemoService = class {
  constructor(app, memoFolder) {
    this.app = app;
    this.memoFolder = memoFolder;
  }
  /**
   * 初始化，确保笔记文件夹存在
   */
  async initialize() {
    await ensureFolderExists(this.app, this.memoFolder);
  }
  /**
   * 创建新笔记
   * @param content 笔记内容
   * @returns 创建的笔记
   */
  async createMemo(content) {
    const now = Date.now();
    const id = generateId();
    const tags = extractTagsFromContent(content);
    const memo = {
      id,
      content,
      createdAt: now,
      updatedAt: now,
      tags
    };
    const fileName = createMemoFileName(memo);
    const filePath = `${this.memoFolder}/${fileName}`;
    const fileContent = createMemoMarkdown(memo);
    await this.app.vault.create(filePath, fileContent);
    return memo;
  }
  /**
   * 更新笔记
   * @param id 笔记ID
   * @param content 新的笔记内容
   * @returns 更新后的笔记
   */
  async updateMemo(id, content) {
    const memo = await this.getMemoById(id);
    if (!memo || !memo.linkedFile) {
      return null;
    }
    const updatedMemo = {
      ...memo,
      content,
      updatedAt: Date.now(),
      tags: extractTagsFromContent(content)
    };
    const fileContent = createMemoMarkdown(updatedMemo);
    await this.app.vault.modify(memo.linkedFile, fileContent);
    return updatedMemo;
  }
  /**
   * 删除笔记
   * @param id 笔记ID
   * @returns 是否成功删除
   */
  async deleteMemo(id) {
    const memo = await this.getMemoById(id);
    if (!memo || !memo.linkedFile) {
      return false;
    }
    await this.app.vault.delete(memo.linkedFile);
    return true;
  }
  /**
   * 根据ID获取笔记
   * @param id 笔记ID
   * @returns 笔记数据
   */
  async getMemoById(id) {
    const files = this.app.vault.getFiles();
    const memoFile = files.find(
      (file) => file.path.startsWith(this.memoFolder) && file.name.includes(id)
    );
    if (!memoFile) {
      return null;
    }
    const content = await this.app.vault.read(memoFile);
    const { createdAt } = parseMemoFileName(memoFile.name);
    const memo = parseMemoMarkdown(content, id, createdAt);
    return {
      ...memo,
      linkedFile: memoFile
    };
  }
  /**
   * 获取所有笔记
   * @param limit 限制数量
   * @param sort 排序方式
   * @returns 笔记列表
   */
  async getAllMemos(limit, sort = "createTime") {
    const files = this.app.vault.getFiles().filter(
      (file) => file.path.startsWith(this.memoFolder) && file.extension === "md"
    );
    const memos = [];
    for (const file of files) {
      try {
        const { id, createdAt } = parseMemoFileName(file.name);
        const content = await this.app.vault.read(file);
        const memo = parseMemoMarkdown(content, id, createdAt);
        memos.push({
          ...memo,
          linkedFile: file
        });
      } catch (error) {
        console.error(`Failed to parse memo file: ${file.name}`, error);
      }
    }
    memos.sort((a, b) => {
      if (sort === "createTime") {
        return b.createdAt - a.createdAt;
      } else {
        return b.updatedAt - a.updatedAt;
      }
    });
    return limit ? memos.slice(0, limit) : memos;
  }
  /**
   * 搜索笔记
   * @param query 搜索条件
   * @returns 符合条件的笔记列表
   */
  async searchMemos(query) {
    const allMemos = await this.getAllMemos();
    return allMemos.filter((memo) => {
      if (query.text && !memo.content.toLowerCase().includes(query.text.toLowerCase())) {
        return false;
      }
      if (query.tags && query.tags.length > 0) {
        const hasAllTags = query.tags.every(
          (tag) => memo.tags.includes(tag)
        );
        if (!hasAllTags)
          return false;
      }
      if (query.timeRange) {
        if (query.timeRange.from && memo.createdAt < query.timeRange.from) {
          return false;
        }
        if (query.timeRange.to && memo.createdAt > query.timeRange.to) {
          return false;
        }
      }
      return true;
    });
  }
};

// src/services/tagService.ts
var TagService = class {
  constructor(app, memoService) {
    this.app = app;
    this.memoService = memoService;
  }
  /**
   * 获取所有标签及其使用数量
   * @returns 标签列表和使用数量
   */
  async getAllTags() {
    const memos = await this.memoService.getAllMemos();
    const tagCount = {};
    memos.forEach((memo) => {
      memo.tags.forEach((tag) => {
        if (!tagCount[tag]) {
          tagCount[tag] = 0;
        }
        tagCount[tag]++;
      });
    });
    return Object.keys(tagCount).map((tag) => ({ name: tag, count: tagCount[tag] })).sort((a, b) => b.count - a.count);
  }
  /**
   * 获取使用最多的标签
   * @param limit 限制数量
   * @returns 热门标签列表
   */
  async getPopularTags(limit = 10) {
    const allTags = await this.getAllTags();
    return allTags.slice(0, limit);
  }
  /**
   * 重命名标签
   * @param oldName 旧标签名
   * @param newName 新标签名
   * @returns 更新的笔记数量
   */
  async renameTag(oldName, newName) {
    if (oldName === newName)
      return 0;
    const memos = await this.memoService.searchMemos({ tags: [oldName] });
    let updatedCount = 0;
    for (const memo of memos) {
      const newContent = memo.content.replace(
        new RegExp(`#${oldName}\\b`, "g"),
        `#${newName}`
      );
      if (newContent !== memo.content) {
        await this.memoService.updateMemo(memo.id, newContent);
        updatedCount++;
      }
    }
    return updatedCount;
  }
  /**
   * 删除标签
   * @param tagName 标签名
   * @returns 更新的笔记数量
   */
  async deleteTag(tagName) {
    const memos = await this.memoService.searchMemos({ tags: [tagName] });
    let updatedCount = 0;
    for (const memo of memos) {
      const newContent = memo.content.replace(
        new RegExp(`#${tagName}\\b`, "g"),
        ""
      );
      if (newContent !== memo.content) {
        await this.memoService.updateMemo(memo.id, newContent);
        updatedCount++;
      }
    }
    return updatedCount;
  }
  /**
   * 合并多个标签为一个
   * @param tags 要合并的标签列表
   * @param targetTag 目标标签
   * @returns 更新的笔记数量
   */
  async mergeTags(tags, targetTag) {
    let updatedCount = 0;
    for (const tag of tags) {
      if (tag !== targetTag) {
        updatedCount += await this.renameTag(tag, targetTag);
      }
    }
    return updatedCount;
  }
};

// src/components/MemoEditor.ts
var import_obsidian3 = require("obsidian");
var MemoEditor = class {
  constructor(options) {
    this.app = options.app;
    this.memoService = options.memoService;
    this.onSubmitCallback = options.onSubmit || (() => {
    });
    this.onCancelCallback = options.onCancel || (() => {
    });
    this.initialContent = options.initialContent || "";
    this.editingMemo = options.editingMemo;
    this.containerEl = document.createElement("div");
    this.containerEl.className = "minder-editor";
  }
  /**
   * 渲染编辑器
   * @param parentEl 父元素
   * @returns 编辑器元素
   */
  render(parentEl) {
    this.containerEl.empty();
    parentEl.appendChild(this.containerEl);
    const editorContainer = this.containerEl.createDiv({ cls: "minder-editor-container" });
    this.textArea = new import_obsidian3.TextAreaComponent(editorContainer);
    this.textArea.setPlaceholder("\u8F93\u5165\u4F60\u7684\u60F3\u6CD5...").setValue(this.initialContent).onChange(() => {
      this.previewTags();
      this.adjustTextareaHeight();
    });
    this.textArea.inputEl.className = "minder-editor-textarea";
    this.textArea.inputEl.focus();
    this.setupAutoResize();
    const bottomBarEl = this.containerEl.createDiv({ cls: "minder-editor-bottom-bar" });
    this.tagPreviewEl = bottomBarEl.createDiv({ cls: "minder-tag-preview" });
    const buttonContainer = bottomBarEl.createDiv({ cls: "minder-editor-buttons" });
    this.cancelButton = new import_obsidian3.ButtonComponent(buttonContainer);
    this.cancelButton.setButtonText("\u53D6\u6D88").onClick(() => {
      this.clear();
      this.onCancelCallback();
    });
    const cancelButtonEl = this.cancelButton.buttonEl;
    cancelButtonEl.style.display = this.editingMemo ? "flex" : "none";
    const submitButton = new import_obsidian3.ButtonComponent(buttonContainer);
    submitButton.setIcon("lucide-send-horizontal").setCta().setTooltip("\u53D1\u9001").onClick(() => this.submitMemo());
    this.previewTags();
    this.adjustTextareaHeight();
    return this.containerEl;
  }
  /**
   * 设置自动调整高度的事件监听
   */
  setupAutoResize() {
    if (!this.textArea || !this.textArea.inputEl)
      return;
    this.textArea.inputEl.addEventListener("input", () => {
      this.adjustTextareaHeight();
    });
    window.addEventListener("resize", () => {
      this.adjustTextareaHeight();
    });
  }
  /**
   * 调整文本区域高度
   */
  adjustTextareaHeight() {
    if (!this.textArea || !this.textArea.inputEl)
      return;
    const textareaEl = this.textArea.inputEl;
    textareaEl.style.height = "auto";
    textareaEl.style.height = textareaEl.scrollHeight + "px";
  }
  /**
   * 预览标签
   */
  previewTags() {
    if (!this.tagPreviewEl)
      return;
    this.tagPreviewEl.empty();
    const content = this.textArea.getValue();
    const tags = extractTagsFromContent(content);
    if (tags.length > 0) {
      this.tagPreviewEl.createSpan({ text: "\u6807\u7B7E: " });
      tags.forEach((tag) => {
        const tagEl = this.tagPreviewEl.createSpan({ cls: "minder-tag-preview-item" });
        tagEl.setText(tag);
      });
    }
  }
  /**
   * 提交笔记
   */
  async submitMemo() {
    const content = this.textArea.getValue();
    if (!content.trim())
      return;
    let memo;
    try {
      if (this.editingMemo) {
        const updated = await this.memoService.updateMemo(this.editingMemo.id, content);
        if (updated) {
          memo = updated;
        } else {
          throw new Error("\u66F4\u65B0\u7B14\u8BB0\u5931\u8D25");
        }
      } else {
        memo = await this.memoService.createMemo(content);
      }
      this.clear();
      this.onSubmitCallback(memo);
    } catch (error) {
      console.error("\u4FDD\u5B58\u7B14\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 清空编辑器内容
   */
  clear() {
    if (this.textArea) {
      this.textArea.setValue("");
      if (this.tagPreviewEl) {
        this.tagPreviewEl.empty();
      }
      this.editingMemo = void 0;
      if (this.cancelButton) {
        this.cancelButton.buttonEl.style.display = "none";
      }
      this.adjustTextareaHeight();
    }
  }
  /**
   * 获取内容
   */
  getContent() {
    return this.textArea ? this.textArea.getValue() : "";
  }
  /**
   * 设置内容
   * @param content 内容
   */
  setContent(content) {
    if (this.textArea) {
      this.textArea.setValue(content);
      this.previewTags();
      this.adjustTextareaHeight();
    }
  }
  /**
   * 进入编辑模式
   * @param memo 要编辑的笔记
   */
  setEditMode(memo) {
    this.editingMemo = memo;
    this.setContent(memo.content);
    if (this.cancelButton) {
      this.cancelButton.buttonEl.style.display = "flex";
    }
  }
};

// src/components/MemoItem.ts
var import_obsidian6 = require("obsidian");

// src/utils/date.ts
var import_obsidian4 = require("obsidian");
function formatDate(timestamp, format) {
  return (0, import_obsidian4.moment)(timestamp).format(format);
}
function getRelativeTimeString(timestamp) {
  const now = Date.now();
  const diff = now - timestamp;
  if (diff < 60 * 1e3) {
    return "\u521A\u521A";
  }
  if (diff < 60 * 60 * 1e3) {
    const minutes = Math.floor(diff / (60 * 1e3));
    return `${minutes}\u5206\u949F\u524D`;
  }
  if (diff < 24 * 60 * 60 * 1e3) {
    const hours = Math.floor(diff / (60 * 60 * 1e3));
    return `${hours}\u5C0F\u65F6\u524D`;
  }
  if (diff < 7 * 24 * 60 * 60 * 1e3) {
    const days = Math.floor(diff / (24 * 60 * 60 * 1e3));
    return `${days}\u5929\u524D`;
  }
  return formatDate(timestamp, "YYYY-MM-DD");
}

// src/components/InlineMemoEditor.ts
var import_obsidian5 = require("obsidian");
var InlineMemoEditor = class {
  constructor(options) {
    this.app = options.app;
    this.memoService = options.memoService;
    this.memo = options.memo;
    this.onSubmitCallback = options.onSubmit;
    this.onCancelCallback = options.onCancel;
    this.containerEl = document.createElement("div");
    this.containerEl.className = "minder-inline-editor";
  }
  /**
   * 渲染内联编辑器
   * @param parentEl 父元素
   * @returns 编辑器元素
   */
  render(parentEl) {
    this.containerEl.empty();
    parentEl.appendChild(this.containerEl);
    const editorContainer = this.containerEl.createDiv({ cls: "minder-inline-editor-container" });
    this.textArea = new import_obsidian5.TextAreaComponent(editorContainer);
    this.textArea.setPlaceholder("\u8F93\u5165\u4F60\u7684\u60F3\u6CD5...").setValue(this.memo.content).onChange(() => {
      this.previewTags();
      this.adjustTextareaHeight();
    });
    this.textArea.inputEl.className = "minder-inline-editor-textarea";
    this.textArea.inputEl.focus();
    this.setupAutoResize();
    const bottomBarEl = this.containerEl.createDiv({ cls: "minder-inline-editor-bottom-bar" });
    this.tagPreviewEl = bottomBarEl.createDiv({ cls: "minder-tag-preview" });
    const buttonContainer = bottomBarEl.createDiv({ cls: "minder-inline-editor-buttons" });
    const cancelButton = new import_obsidian5.ButtonComponent(buttonContainer);
    cancelButton.setButtonText("\u53D6\u6D88").onClick(() => {
      this.onCancelCallback();
    });
    const submitButton = new import_obsidian5.ButtonComponent(buttonContainer);
    submitButton.setButtonText("\u4FDD\u5B58").setCta().onClick(() => this.submitMemo());
    this.previewTags();
    this.adjustTextareaHeight();
    return this.containerEl;
  }
  /**
   * 设置自动调整高度的事件监听
   */
  setupAutoResize() {
    if (!this.textArea || !this.textArea.inputEl)
      return;
    this.textArea.inputEl.addEventListener("input", () => {
      this.adjustTextareaHeight();
    });
    window.addEventListener("resize", () => {
      this.adjustTextareaHeight();
    });
  }
  /**
   * 调整文本区域高度
   */
  adjustTextareaHeight() {
    if (!this.textArea || !this.textArea.inputEl)
      return;
    const textareaEl = this.textArea.inputEl;
    textareaEl.style.height = "auto";
    textareaEl.style.height = textareaEl.scrollHeight + "px";
  }
  /**
   * 预览标签
   */
  previewTags() {
    if (!this.tagPreviewEl)
      return;
    this.tagPreviewEl.empty();
    const content = this.textArea.getValue();
    const tags = extractTagsFromContent(content);
    if (tags.length > 0) {
      this.tagPreviewEl.createSpan({ text: "\u6807\u7B7E: " });
      tags.forEach((tag) => {
        const tagEl = this.tagPreviewEl.createSpan({ cls: "minder-tag-preview-item" });
        tagEl.setText(tag);
      });
    }
  }
  /**
   * 提交笔记
   */
  async submitMemo() {
    const content = this.textArea.getValue();
    if (!content.trim())
      return;
    try {
      const updated = await this.memoService.updateMemo(this.memo.id, content);
      if (updated) {
        this.onSubmitCallback(updated);
      } else {
        throw new Error("\u66F4\u65B0\u7B14\u8BB0\u5931\u8D25");
      }
    } catch (error) {
      console.error("\u4FDD\u5B58\u7B14\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 获取内容
   */
  getContent() {
    return this.textArea ? this.textArea.getValue() : "";
  }
  /**
   * 聚焦到编辑器
   */
  focus() {
    if (this.textArea && this.textArea.inputEl) {
      this.textArea.inputEl.focus();
    }
  }
};

// src/components/MemoItem.ts
var MemoItemComponent = class {
  constructor(options) {
    this.inlineEditor = null;
    this.app = options.app;
    this.memo = options.memo;
    this.memoService = options.memoService;
    this.dateFormat = options.dateFormat;
    this.showTimestamp = options.showTimestamp;
    this.onEditCallback = options.onEdit || (() => {
    });
    this.onDeleteCallback = options.onDelete || (() => {
    });
    this.onClickCallback = options.onClick || (() => {
    });
    this.onUpdateCallback = options.onUpdate || (() => {
    });
    this.component = options.component || null;
    this.isEditing = false;
    this.containerEl = document.createElement("div");
    this.containerEl.className = "minder-memo-item";
    this.containerEl.dataset.id = this.memo.id;
  }
  /**
   * 渲染笔记项
   * @param parentEl 父元素
   * @returns 笔记项元素
   */
  render(parentEl) {
    this.containerEl.empty();
    parentEl.appendChild(this.containerEl);
    if (this.isEditing) {
      this.containerEl.classList.add("minder-memo-editing");
    } else {
      this.containerEl.classList.remove("minder-memo-editing");
    }
    const headerEl = this.containerEl.createDiv({
      cls: "minder-memo-header"
    });
    if (this.showTimestamp) {
      const timeEl = headerEl.createDiv({ cls: "minder-memo-time" });
      timeEl.setText(getRelativeTimeString(this.memo.createdAt));
      timeEl.setAttribute(
        "title",
        formatDate(this.memo.createdAt, this.dateFormat)
      );
    }
    const actionsEl = headerEl.createDiv({ cls: "minder-memo-actions" });
    if (this.isEditing) {
      const editingBadgeEl = actionsEl.createDiv({
        cls: "minder-memo-editing-badge"
      });
      editingBadgeEl.setText("\u7F16\u8F91\u4E2D");
    }
    const moreButtonEl = actionsEl.createDiv({
      cls: "minder-memo-action-button"
    });
    (0, import_obsidian6.setIcon)(moreButtonEl, "more-horizontal");
    moreButtonEl.addEventListener("click", (event) => {
      this.showActionsMenu(moreButtonEl, event);
      event.stopPropagation();
    });
    this.contentEl = this.containerEl.createDiv({
      cls: "minder-memo-content"
    });
    if (this.isEditing) {
      this.renderInlineEditor();
    } else {
      this.renderContent(this.contentEl);
    }
    if (this.memo.tags.length > 0) {
      const tagsEl = this.containerEl.createDiv({
        cls: "minder-memo-tags"
      });
      this.memo.tags.forEach((tag) => {
        const tagEl = tagsEl.createSpan({ cls: "minder-memo-tag" });
        tagEl.setText("#" + tag);
        tagEl.addEventListener("click", (event) => {
          event.stopPropagation();
        });
      });
    }
    if (!this.isEditing) {
      this.containerEl.addEventListener("click", () => {
        this.onClickCallback(this.memo);
      });
      this.containerEl.addEventListener("dblclick", (event) => {
        this.startInlineEditing();
        event.stopPropagation();
      });
    }
    return this.containerEl;
  }
  /**
   * 渲染笔记内容
   * @param containerEl 容器元素
   */
  renderContent(containerEl) {
    containerEl.empty();
    try {
      if (this.component) {
        import_obsidian6.MarkdownRenderer.renderMarkdown(
          this.memo.content,
          containerEl,
          "",
          this.component
        );
      } else {
        const contentP = containerEl.createEl("p");
        contentP.textContent = this.memo.content;
      }
    } catch (error) {
      console.error("\u6E32\u67D3Markdown\u5185\u5BB9\u5931\u8D25:", error);
      const errorP = containerEl.createEl("p");
      errorP.textContent = this.memo.content;
    }
  }
  /**
   * 渲染内联编辑器
   */
  renderInlineEditor() {
    if (!this.contentEl)
      return;
    this.contentEl.empty();
    this.inlineEditor = new InlineMemoEditor({
      app: this.app,
      memoService: this.memoService,
      memo: this.memo,
      onSubmit: (updatedMemo) => {
        this.memo = updatedMemo;
        this.setEditingState(false);
        this.renderContent(this.contentEl);
        this.updateTagsSection();
        this.onUpdateCallback(updatedMemo);
      },
      onCancel: () => {
        this.setEditingState(false);
        this.renderContent(this.contentEl);
        this.updateTagsSection();
      }
    });
    this.inlineEditor.render(this.contentEl);
    if (this.inlineEditor) {
      setTimeout(() => {
        var _a;
        (_a = this.inlineEditor) == null ? void 0 : _a.focus();
      }, 10);
    }
  }
  /**
   * 更新标签区域
   */
  updateTagsSection() {
    const existingTagsEl = this.containerEl.querySelector(".minder-memo-tags");
    if (this.memo.tags.length > 0) {
      if (existingTagsEl) {
        existingTagsEl.empty();
        this.memo.tags.forEach((tag) => {
          const tagEl = existingTagsEl.createSpan({ cls: "minder-memo-tag" });
          tagEl.setText("#" + tag);
          tagEl.addEventListener("click", (event) => {
            event.stopPropagation();
          });
        });
      } else {
        const tagsEl = this.containerEl.createDiv({
          cls: "minder-memo-tags"
        });
        this.memo.tags.forEach((tag) => {
          const tagEl = tagsEl.createSpan({ cls: "minder-memo-tag" });
          tagEl.setText("#" + tag);
          tagEl.addEventListener("click", (event) => {
            event.stopPropagation();
          });
        });
      }
    } else if (existingTagsEl) {
      existingTagsEl.remove();
    }
  }
  /**
   * 开始内联编辑
   */
  startInlineEditing() {
    this.onEditCallback(this.memo);
    this.setEditingState(true);
    this.renderInlineEditor();
  }
  /**
   * 显示操作菜单
   * @param targetEl 触发菜单的元素
   * @param event 事件对象
   */
  showActionsMenu(targetEl, event) {
    const menu = new import_obsidian6.Menu();
    menu.addItem((item) => {
      item.setTitle("\u7F16\u8F91").setIcon("pencil").onClick(() => {
        this.startInlineEditing();
      });
    });
    menu.addItem((item) => {
      const itemDom = item.setTitle("\u5220\u9664").setIcon("trash").onClick(() => {
        this.showDeleteConfirmation();
      });
      const titleEl = itemDom.titleEl;
      if (titleEl) {
        titleEl.style.color = "var(--text-error)";
      }
      const iconEl = itemDom.iconEl;
      if (iconEl) {
        iconEl.style.color = "var(--text-error)";
      }
    });
    if (this.memo.linkedFile) {
      menu.addItem((item) => {
        item.setTitle("\u8FDB\u5165\u6E90\u6587\u4EF6").setIcon("file-text").onClick(() => {
          this.app.workspace.getLeaf().openFile(this.memo.linkedFile);
        });
      });
    }
    menu.showAtMouseEvent(event);
  }
  /**
   * 更新笔记数据
   * @param memo 新的笔记数据
   */
  update(memo) {
    this.memo = memo;
    const parentEl = this.containerEl.parentElement;
    if (parentEl) {
      this.render(parentEl);
    }
  }
  /**
   * 设置编辑状态
   * @param isEditing 是否正在编辑
   */
  setEditingState(isEditing) {
    this.isEditing = isEditing;
    if (this.containerEl) {
      if (isEditing) {
        this.containerEl.classList.add("minder-memo-editing");
      } else {
        this.containerEl.classList.remove("minder-memo-editing");
        this.inlineEditor = null;
      }
    }
  }
  /**
   * 保存当前编辑内容
   * 如果当前处于编辑状态，则保存更改
   */
  async saveCurrentEdit() {
    if (!this.isEditing || !this.inlineEditor) {
      return;
    }
    try {
      const content = this.inlineEditor.getContent();
      if (!content.trim() || content === this.memo.content) {
        this.setEditingState(false);
        this.renderContent(this.contentEl);
        this.updateTagsSection();
        return;
      }
      const updatedMemo = await this.memoService.updateMemo(this.memo.id, content);
      if (updatedMemo) {
        this.memo = updatedMemo;
        this.setEditingState(false);
        this.renderContent(this.contentEl);
        this.updateTagsSection();
        this.onUpdateCallback(updatedMemo);
      }
    } catch (error) {
      console.error("\u4FDD\u5B58\u7B14\u8BB0\u65F6\u51FA\u9519:", error);
      this.setEditingState(false);
      this.renderContent(this.contentEl);
    }
  }
  /**
   * 显示删除确认对话框
   */
  showDeleteConfirmation() {
    const confirmModal = new import_obsidian6.Modal(this.app);
    confirmModal.titleEl.setText("\u786E\u8BA4\u5220\u9664");
    const contentEl = confirmModal.contentEl;
    contentEl.empty();
    const messageEl = contentEl.createDiv();
    messageEl.setText("\u786E\u5B9A\u8981\u5220\u9664\u8FD9\u6761\u7B14\u8BB0\u5417\uFF1F\u6B64\u64CD\u4F5C\u4E0D\u53EF\u64A4\u9500\u3002");
    messageEl.style.marginBottom = "20px";
    const previewEl = contentEl.createDiv({ cls: "minder-delete-preview" });
    previewEl.style.padding = "10px";
    previewEl.style.background = "var(--background-secondary)";
    previewEl.style.borderRadius = "5px";
    previewEl.style.marginBottom = "20px";
    previewEl.style.maxHeight = "100px";
    previewEl.style.overflow = "auto";
    const previewContent = this.memo.content.length > 50 ? this.memo.content.substring(0, 50) + "..." : this.memo.content;
    previewEl.setText(previewContent);
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    const cancelButton = buttonContainer.createEl("button");
    cancelButton.setText("\u53D6\u6D88");
    cancelButton.addEventListener("click", () => {
      confirmModal.close();
    });
    const confirmButton = buttonContainer.createEl("button");
    confirmButton.setText("\u5220\u9664");
    confirmButton.classList.add("mod-warning");
    confirmButton.addEventListener("click", () => {
      this.onDeleteCallback(this.memo);
      confirmModal.close();
    });
    confirmModal.open();
  }
  /**
   * 获取容器元素
   * @returns 容器元素
   */
  getContainerEl() {
    return this.containerEl;
  }
};

// src/components/TagsBar.ts
var TagsBar = class {
  constructor(options) {
    this.tags = [];
    this.selectedTag = null;
    this.app = options.app;
    this.tagService = options.tagService;
    this.onTagClickCallback = options.onTagClick || (() => {
    });
    this.containerEl = document.createElement("div");
    this.containerEl.className = "minder-tags-bar";
  }
  /**
   * 渲染标签栏
   * @param parentEl 父元素
   * @returns 标签栏元素
   */
  async render(parentEl) {
    this.containerEl.empty();
    parentEl.appendChild(this.containerEl);
    await this.loadTags();
    const allTagEl = this.containerEl.createDiv({ cls: "minder-tag-item" });
    allTagEl.classList.toggle("minder-tag-selected", this.selectedTag === null);
    allTagEl.setText("\u5168\u90E8");
    allTagEl.addEventListener("click", () => this.selectTag(null));
    for (const tag of this.tags) {
      const tagEl = this.containerEl.createDiv({ cls: "minder-tag-item" });
      tagEl.classList.toggle("minder-tag-selected", tag.name === this.selectedTag);
      tagEl.createSpan({ text: tag.name });
      tagEl.createSpan({ cls: "minder-tag-count", text: `(${tag.count})` });
      tagEl.addEventListener("click", () => this.selectTag(tag.name));
    }
    return this.containerEl;
  }
  /**
   * 加载标签
   */
  async loadTags() {
    this.tags = await this.tagService.getAllTags();
  }
  /**
   * 选择标签
   * @param tagName 标签名
   */
  selectTag(tagName) {
    this.selectedTag = tagName;
    const tagItems = this.containerEl.querySelectorAll(".minder-tag-item");
    tagItems.forEach((item, index) => {
      var _a;
      const isSelected = index === 0 ? this.selectedTag === null : this.selectedTag === ((_a = this.tags[index - 1]) == null ? void 0 : _a.name);
      item.classList.toggle("minder-tag-selected", isSelected);
    });
    if (tagName !== null) {
      this.onTagClickCallback(tagName);
    } else {
      this.onTagClickCallback("");
    }
  }
  /**
   * 刷新标签数据
   */
  async refresh() {
    await this.loadTags();
    if (this.containerEl.parentElement) {
      this.render(this.containerEl.parentElement);
    }
  }
  /**
   * 获取选中的标签
   * @returns 选中的标签名
   */
  getSelectedTag() {
    return this.selectedTag;
  }
  /**
   * 设置选中的标签
   * @param tagName 标签名
   */
  setSelectedTag(tagName) {
    this.selectTag(tagName);
  }
};

// src/components/MemoView.ts
var MEMO_VIEW_TYPE = "minder-memo-view";
var MemoView = class extends import_obsidian7.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.memos = [];
    this.currentViewType = "all" /* ALL */;
    this.currentTag = "";
    this.searchText = "";
    this.currentEditingMemoId = null;
    this.memoComponents = /* @__PURE__ */ new Map();
    this.isSearchVisible = false;
    this.settings = settings;
    this.memoService = new MemoService(this.app, this.settings.notesFolder);
    this.tagService = new TagService(this.app, this.memoService);
  }
  getViewType() {
    return MEMO_VIEW_TYPE;
  }
  getDisplayText() {
    return "Minder";
  }
  getIcon() {
    return "lightbulb";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    await this.memoService.initialize();
    containerEl.addClass("minder-container");
    const editorEl = containerEl.createDiv({ cls: "minder-editor-area" });
    this.editor = new MemoEditor({
      app: this.app,
      memoService: this.memoService,
      placeholder: "\u8F93\u5165\u4F60\u7684\u60F3\u6CD5...",
      onSubmit: async (memo) => {
        var _a;
        if (this.currentEditingMemoId) {
          this.clearEditingState();
        }
        await this.refreshMemos();
        await ((_a = this.tagsBar) == null ? void 0 : _a.refresh());
      },
      onCancel: () => {
        this.clearEditingState();
      }
    });
    this.editor.render(editorEl);
    const topBarEl = containerEl.createDiv({ cls: "minder-top-bar" });
    this.searchEl = topBarEl.createDiv({ cls: "minder-search" });
    this.searchEl.style.display = "none";
    const searchInput = this.searchEl.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "minder-search-input"
    });
    searchInput.addEventListener("input", (e) => {
      this.searchText = e.target.value;
      this.refreshMemos();
    });
    searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        this.hideSearch();
        e.preventDefault();
        e.stopPropagation();
      }
    });
    const tagsBarEl = containerEl.createDiv({ cls: "minder-tags-area" });
    const buttonsContainer = tagsBarEl.createDiv({ cls: "minder-buttons-container" });
    const refreshButton = buttonsContainer.createDiv({ cls: "minder-refresh-button" });
    (0, import_obsidian7.setIcon)(refreshButton, "refresh-cw");
    refreshButton.setAttribute("aria-label", "\u5237\u65B0\u7B14\u8BB0");
    refreshButton.addEventListener("click", async () => {
      var _a;
      await this.refreshMemos();
      await ((_a = this.tagsBar) == null ? void 0 : _a.refresh());
      new import_obsidian7.Notice("\u7B14\u8BB0\u5DF2\u5237\u65B0");
    });
    this.searchButton = buttonsContainer.createDiv({ cls: "minder-search-button" });
    (0, import_obsidian7.setIcon)(this.searchButton, "search");
    this.searchButton.setAttribute("aria-label", "\u641C\u7D22\u7B14\u8BB0");
    this.searchButton.addEventListener("click", () => {
      this.toggleSearchVisibility();
    });
    this.tagsBar = new TagsBar({
      app: this.app,
      tagService: this.tagService,
      onTagClick: (tagName) => {
        this.currentTag = tagName;
        this.currentViewType = tagName ? "tag" /* TAG */ : "all" /* ALL */;
        this.refreshMemos();
      }
    });
    await this.tagsBar.render(tagsBarEl);
    this.memoContentEl = containerEl.createDiv({
      cls: "minder-content-area"
    });
    this.memosContainer = this.memoContentEl.createDiv({
      cls: "minder-memos-container"
    });
    this.refreshMemos();
  }
  /**
   * 显示搜索框
   */
  showSearch() {
    this.isSearchVisible = true;
    this.searchEl.style.display = "block";
    this.searchButton.classList.add("active");
    const searchInput = this.searchEl.querySelector(".minder-search-input");
    if (searchInput) {
      setTimeout(() => searchInput.focus(), 10);
    }
  }
  /**
   * 隐藏搜索框
   */
  hideSearch() {
    this.isSearchVisible = false;
    this.searchEl.style.display = "none";
    this.searchButton.classList.remove("active");
    const searchInput = this.searchEl.querySelector(".minder-search-input");
    if (searchInput) {
      searchInput.value = "";
      this.searchText = "";
      this.refreshMemos();
    }
  }
  /**
   * 切换搜索框的可见性
   */
  toggleSearchVisibility() {
    if (this.isSearchVisible) {
      this.hideSearch();
    } else {
      this.showSearch();
    }
  }
  async onClose() {
  }
  /**
   * 刷新笔记列表
   */
  async refreshMemos() {
    this.memosContainer.empty();
    this.memoComponents.clear();
    try {
      switch (this.currentViewType) {
        case "tag" /* TAG */:
          if (this.currentTag) {
            this.memos = await this.memoService.searchMemos({
              tags: [this.currentTag],
              text: this.searchText
            });
          } else {
            this.memos = await this.memoService.getAllMemos(
              this.settings.displayCount,
              this.settings.defaultSort
            );
          }
          break;
        case "all" /* ALL */:
        default:
          if (this.searchText) {
            this.memos = await this.memoService.searchMemos({
              text: this.searchText
            });
          } else {
            this.memos = await this.memoService.getAllMemos(
              this.settings.displayCount,
              this.settings.defaultSort
            );
          }
          break;
      }
      for (const memo of this.memos) {
        const memoItemComponent = new MemoItemComponent({
          app: this.app,
          memo,
          memoService: this.memoService,
          dateFormat: this.settings.dateFormat,
          showTimestamp: true,
          // 总是显示时间戳
          onEdit: (memo2) => this.editMemo(memo2),
          onDelete: (memo2) => this.deleteMemo(memo2),
          onUpdate: async (memo2) => {
            var _a;
            await ((_a = this.tagsBar) == null ? void 0 : _a.refresh());
            if (this.currentViewType === "tag" /* TAG */ && this.currentTag) {
              const hasCurrentTag = memo2.tags.includes(this.currentTag);
              if (!hasCurrentTag) {
                await this.refreshMemos();
              }
            }
          },
          component: this
          // 传递当前View组件给MemoItemComponent
        });
        memoItemComponent.render(this.memosContainer);
        this.memoComponents.set(memo.id, memoItemComponent);
        if (this.currentEditingMemoId === memo.id) {
          memoItemComponent.setEditingState(true);
        }
      }
      if (this.memos.length === 0) {
        const emptyEl = this.memosContainer.createDiv({
          cls: "minder-empty-state"
        });
        emptyEl.setText("\u6682\u65E0\u7B14\u8BB0");
      }
    } catch (error) {
      console.error("\u52A0\u8F7D\u7B14\u8BB0\u5931\u8D25", error);
      new import_obsidian7.Notice("\u52A0\u8F7D\u7B14\u8BB0\u5931\u8D25");
    }
  }
  /**
   * 编辑笔记
   * @param memo 笔记
   */
  editMemo(memo) {
    if (this.currentEditingMemoId && this.currentEditingMemoId !== memo.id) {
      const currentEditingMemoComponent = this.memoComponents.get(this.currentEditingMemoId);
      if (currentEditingMemoComponent) {
        currentEditingMemoComponent.saveCurrentEdit();
      }
    }
    this.clearEditingState();
    this.currentEditingMemoId = memo.id;
    const memoComponent = this.memoComponents.get(memo.id);
    if (memoComponent) {
      memoComponent.setEditingState(true);
      const memoEl = memoComponent.getContainerEl();
      if (memoEl) {
        memoEl.scrollIntoView({
          behavior: "smooth",
          block: "nearest"
          // 只在需要时滚动
        });
      }
    }
  }
  /**
   * 删除笔记
   * @param memo 笔记
   */
  async deleteMemo(memo) {
    try {
      if (this.currentEditingMemoId === memo.id) {
        this.clearEditingState();
      }
      await this.memoService.deleteMemo(memo.id);
      await this.refreshMemos();
      await this.tagsBar.refresh();
      new import_obsidian7.Notice("\u7B14\u8BB0\u5DF2\u5220\u9664");
    } catch (error) {
      console.error("\u5220\u9664\u7B14\u8BB0\u5931\u8D25", error);
      new import_obsidian7.Notice("\u5220\u9664\u7B14\u8BB0\u5931\u8D25");
    }
  }
  /**
   * 清除编辑状态
   */
  clearEditingState() {
    if (this.currentEditingMemoId) {
      const prevMemoComponent = this.memoComponents.get(
        this.currentEditingMemoId
      );
      if (prevMemoComponent) {
        prevMemoComponent.setEditingState(false);
      }
      this.currentEditingMemoId = null;
    }
  }
  /**
   * 聚焦到编辑器
   */
  focusEditor() {
    var _a;
    if (this.editor) {
      (_a = this.containerEl.querySelector(".minder-editor-area")) == null ? void 0 : _a.scrollIntoView({
        behavior: "smooth",
        block: "center"
      });
      const textAreaEl = this.containerEl.querySelector(
        ".minder-editor-textarea"
      );
      if (textAreaEl) {
        textAreaEl.focus();
      }
    }
  }
};

// main.ts
var MinderPlugin = class extends import_obsidian8.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      MEMO_VIEW_TYPE,
      (leaf) => new MemoView(leaf, this.settings)
    );
    this.addRibbonIcon("lightbulb", "Minder \u5FEB\u901F\u7B14\u8BB0", async () => {
      await this.activateView();
    });
    this.addCommand({
      id: "open-minder",
      name: "\u6253\u5F00 Minder \u7B14\u8BB0\u89C6\u56FE",
      callback: async () => {
        await this.activateView();
      }
    });
    this.addCommand({
      id: "add-quick-memo",
      name: "\u5FEB\u901F\u6DFB\u52A0\u7B14\u8BB0",
      callback: () => {
        this.activateView().then(() => {
          const viewLeaf = this.app.workspace.getLeavesOfType(MEMO_VIEW_TYPE)[0];
          if (viewLeaf) {
            const view = viewLeaf.view;
            view.focusEditor();
          }
        });
      }
    });
    this.addSettingTab(new MinderSettingTab(this.app, this));
    if (this.settings.openOnStartup) {
      setTimeout(() => {
        this.activateView();
      }, 500);
    }
  }
  onunload() {
    this.app.workspace.getLeavesOfType(MEMO_VIEW_TYPE).forEach((leaf) => leaf.detach());
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * 激活视图
   */
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(MEMO_VIEW_TYPE)[0];
    if (!leaf) {
      leaf = workspace.getLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: MEMO_VIEW_TYPE,
          active: true
        });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
